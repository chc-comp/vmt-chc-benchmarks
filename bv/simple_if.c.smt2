;; translated from ./bv/simple_if.c.vmt
;; original benchmark available at: https://es-static.fbk.eu/people/griggio/ic3ia/index.html
;; author: Alberto Griggio <griggio@fbk.eu>
(set-logic HORN)
(declare-fun state (Bool Bool Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((|.PC.2.next| Bool) (|m__3$main| (_ BitVec 32)) (|m__3$main.next| (_ BitVec 32)) (|__RET__$main.next| (_ BitVec 32)) (|__RET__$main| (_ BitVec 32)) (|n__1$main| (_ BitVec 32)) (|n__1$main.next| (_ BitVec 32)) (|i__5$main| (_ BitVec 32)) (|i__5$main.next| (_ BitVec 32)) (|__NONDET_INLINE_INIT__4__4$main#1| (_ BitVec 32)) (|__NONDET_INLINE_INIT__2__3$main#0| (_ BitVec 32)) (|.PC.0| Bool) (|.PC.1| Bool) (|.PC.2| Bool) (|.PC.0.next| Bool) (|.PC.1.next| Bool)) (=> (let ((.def_13 (and .PC.1 .PC.0)))
(let ((.def_10 (not .PC.2)))
(let ((.def_14 (and .def_10 .def_13)))
.def_14))) (state |.PC.2| |.PC.1| |.PC.0| |__RET__$main| |n__1$main| |i__5$main| |m__3$main|))))
(assert (forall ((|.PC.2.next| Bool) (|m__3$main| (_ BitVec 32)) (|m__3$main.next| (_ BitVec 32)) (|__RET__$main.next| (_ BitVec 32)) (|__RET__$main| (_ BitVec 32)) (|n__1$main| (_ BitVec 32)) (|n__1$main.next| (_ BitVec 32)) (|i__5$main| (_ BitVec 32)) (|i__5$main.next| (_ BitVec 32)) (|__NONDET_INLINE_INIT__4__4$main#1| (_ BitVec 32)) (|__NONDET_INLINE_INIT__2__3$main#0| (_ BitVec 32)) (|.PC.0| Bool) (|.PC.1| Bool) (|.PC.2| Bool) (|.PC.0.next| Bool) (|.PC.1.next| Bool)) (=> (and (state |.PC.2| |.PC.1| |.PC.0| |__RET__$main| |n__1$main| |i__5$main| |m__3$main|) (let ((.def_59 (not .PC.0)))
(let ((.def_91 (and .PC.1 .def_59)))
(let ((.def_10 (not .PC.2)))
(let ((.def_92 (and .def_10 .def_91)))
(let ((.def_33 (not .PC.0.next)))
(let ((.def_86 (and .PC.1.next .def_33)))
(let ((.def_55 (not .PC.2.next)))
(let ((.def_87 (and .def_55 .def_86)))
(let ((.def_93 (and .def_87 .def_92)))
(let ((.def_49 (= m__3$main.next m__3$main)))
(let ((.def_28 (= __RET__$main __RET__$main.next)))
(let ((.def_83 (and .def_28 .def_49)))
(let ((.def_51 (= n__1$main.next n__1$main)))
(let ((.def_84 (and .def_51 .def_83)))
(let ((.def_53 (= i__5$main.next i__5$main)))
(let ((.def_85 (and .def_53 .def_84)))
(let ((.def_88 (and .def_85 .def_87)))
(let ((.def_58 (not .PC.1)))
(let ((.def_60 (and .def_58 .def_59)))
(let ((.def_82 (and .def_10 .def_60)))
(let ((.def_89 (and .def_82 .def_88)))
(let ((.def_72 (bvmul (_ bv3 32) i__5$main)))
(let ((.def_73 (= i__5$main.next .def_72)))
(let ((.def_64 (bvslt (_ bv0 32) m__3$main)))
(let ((.def_69 (not .def_64)))
(let ((.def_41 (bvslt i__5$main n__1$main)))
(let ((.def_70 (and .def_41 .def_69)))
(let ((.def_74 (and .def_70 .def_73)))
(let ((.def_66 (bvshl i__5$main (_ bv1 32))))
(let ((.def_67 (= i__5$main.next .def_66)))
(let ((.def_65 (and .def_41 .def_64)))
(let ((.def_68 (and .def_65 .def_67)))
(let ((.def_75 (or .def_68 .def_74)))
(let ((.def_76 (and .def_28 .def_75)))
(let ((.def_77 (and .def_49 .def_76)))
(let ((.def_78 (and .def_51 .def_77)))
(let ((.def_31 (not .PC.1.next)))
(let ((.def_34 (and .def_31 .def_33)))
(let ((.def_36 (and .def_34 .PC.2.next)))
(let ((.def_79 (and .def_36 .def_78)))
(let ((.def_61 (and .PC.2 .def_60)))
(let ((.def_80 (and .def_61 .def_79)))
(let ((.def_56 (and .def_34 .def_55)))
(let ((.def_44 (bvslt (_ bv0 32) i__5$main)))
(let ((.def_45 (not .def_44)))
(let ((.def_42 (not .def_41)))
(let ((.def_46 (and .def_42 .def_45)))
(let ((.def_47 (and .def_28 .def_46)))
(let ((.def_50 (and .def_47 .def_49)))
(let ((.def_52 (and .def_50 .def_51)))
(let ((.def_54 (and .def_52 .def_53)))
(let ((.def_57 (and .def_54 .def_56)))
(let ((.def_62 (and .def_57 .def_61)))
(let ((.def_24 (= i__5$main.next (_ bv1 32))))
(let ((.def_20 (= m__3$main.next |__NONDET_INLINE_INIT__4__4$main#1|)))
(let ((.def_17 (= n__1$main.next |__NONDET_INLINE_INIT__2__3$main#0|)))
(let ((.def_21 (and .def_17 .def_20)))
(let ((.def_25 (and .def_21 .def_24)))
(let ((.def_29 (and .def_25 .def_28)))
(let ((.def_37 (and .def_29 .def_36)))
(let ((.def_13 (and .PC.1 .PC.0)))
(let ((.def_14 (and .def_10 .def_13)))
(let ((.def_38 (and .def_14 .def_37)))
(let ((.def_63 (or .def_38 .def_62)))
(let ((.def_81 (or .def_63 .def_80)))
(let ((.def_90 (or .def_81 .def_89)))
(let ((.def_94 (or .def_90 .def_93)))
.def_94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (state |.PC.2.next| |.PC.1.next| |.PC.0.next| |__RET__$main.next| |n__1$main.next| |i__5$main.next| |m__3$main.next|))))
(assert (forall ((|.PC.2.next| Bool) (|m__3$main| (_ BitVec 32)) (|m__3$main.next| (_ BitVec 32)) (|__RET__$main.next| (_ BitVec 32)) (|__RET__$main| (_ BitVec 32)) (|n__1$main| (_ BitVec 32)) (|n__1$main.next| (_ BitVec 32)) (|i__5$main| (_ BitVec 32)) (|i__5$main.next| (_ BitVec 32)) (|__NONDET_INLINE_INIT__4__4$main#1| (_ BitVec 32)) (|__NONDET_INLINE_INIT__2__3$main#0| (_ BitVec 32)) (|.PC.0| Bool) (|.PC.1| Bool) (|.PC.2| Bool) (|.PC.0.next| Bool) (|.PC.1.next| Bool)) (=> (state |.PC.2| |.PC.1| |.PC.0| |__RET__$main| |n__1$main| |i__5$main| |m__3$main|) (let ((.def_59 (not .PC.0)))
(let ((.def_91 (and .PC.1 .def_59)))
(let ((.def_10 (not .PC.2)))
(let ((.def_92 (and .def_10 .def_91)))
(let ((.def_95 (not .def_92)))
.def_95))))))))
(check-sat)
