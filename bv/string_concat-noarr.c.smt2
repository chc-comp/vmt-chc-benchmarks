;; translated from ./bv/string_concat-noarr.c.vmt
;; original benchmark available at: https://es-static.fbk.eu/people/griggio/ic3ia/index.html
;; author: Alberto Griggio <griggio@fbk.eu>
(set-logic HORN)
(declare-fun state (Bool Bool Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((|i__2$main.next| (_ BitVec 32)) (|__RET__$main.next| (_ BitVec 32)) (|__RET__$main| (_ BitVec 32)) (|j__4$main| (_ BitVec 32)) (|j__4$main.next| (_ BitVec 32)) (|.PC.2| Bool) (|.PC.1| Bool) (|.PC.0| Bool) (|.PC.0.next| Bool) (|.PC.1.next| Bool) (|.PC.2.next| Bool) (|i__2$main| (_ BitVec 32))) (=> (let ((.def_15 (not .PC.2)))
(let ((.def_12 (not .PC.1)))
(let ((.def_10 (not .PC.0)))
(let ((.def_13 (and .def_10 .def_12)))
(let ((.def_16 (and .def_13 .def_15)))
.def_16))))) (state |.PC.0| |.PC.1| |.PC.2| |__RET__$main| |j__4$main| |i__2$main|))))
(assert (forall ((|i__2$main.next| (_ BitVec 32)) (|__RET__$main.next| (_ BitVec 32)) (|__RET__$main| (_ BitVec 32)) (|j__4$main| (_ BitVec 32)) (|j__4$main.next| (_ BitVec 32)) (|.PC.2| Bool) (|.PC.1| Bool) (|.PC.0| Bool) (|.PC.0.next| Bool) (|.PC.1.next| Bool) (|.PC.2.next| Bool) (|i__2$main| (_ BitVec 32))) (=> (and (state |.PC.0| |.PC.1| |.PC.2| |__RET__$main| |j__4$main| |i__2$main|) (let ((.def_12 (not .PC.1)))
(let ((.def_10 (not .PC.0)))
(let ((.def_13 (and .def_10 .def_12)))
(let ((.def_76 (and .def_13 .PC.2)))
(let ((.def_70 (not .PC.0.next)))
(let ((.def_37 (not .PC.1.next)))
(let ((.def_71 (and .def_37 .def_70)))
(let ((.def_72 (and .PC.2.next .def_71)))
(let ((.def_77 (and .def_72 .def_76)))
(let ((.def_62 (= i__2$main.next i__2$main)))
(let ((.def_34 (= __RET__$main __RET__$main.next)))
(let ((.def_63 (and .def_34 .def_62)))
(let ((.def_50 (= j__4$main.next j__4$main)))
(let ((.def_64 (and .def_50 .def_63)))
(let ((.def_73 (and .def_64 .def_72)))
(let ((.def_68 (and .PC.0 .def_12)))
(let ((.def_15 (not .PC.2)))
(let ((.def_69 (and .def_15 .def_68)))
(let ((.def_74 (and .def_69 .def_73)))
(let ((.def_54 (and .PC.1.next .PC.0.next)))
(let ((.def_41 (not .PC.2.next)))
(let ((.def_55 (and .def_41 .def_54)))
(let ((.def_65 (and .def_55 .def_64)))
(let ((.def_59 (and .PC.0 .PC.1)))
(let ((.def_60 (and .def_15 .def_59)))
(let ((.def_66 (and .def_60 .def_65)))
(let ((.def_21 (bvslt i__2$main.next (_ bv100 32))))
(let ((.def_47 (not .def_21)))
(let ((.def_19 (= i__2$main.next (_ bv0 32))))
(let ((.def_48 (and .def_19 .def_47)))
(let ((.def_51 (and .def_48 .def_50)))
(let ((.def_26 (bvslt j__4$main.next (_ bv100 32))))
(let ((.def_45 (not .def_26)))
(let ((.def_24 (= j__4$main.next (_ bv0 32))))
(let ((.def_22 (and .def_19 .def_21)))
(let ((.def_25 (and .def_22 .def_24)))
(let ((.def_46 (and .def_25 .def_45)))
(let ((.def_52 (or .def_46 .def_51)))
(let ((.def_53 (and .def_34 .def_52)))
(let ((.def_56 (and .def_53 .def_55)))
(let ((.def_16 (and .def_13 .def_15)))
(let ((.def_57 (and .def_16 .def_56)))
(let ((.def_39 (and .def_37 .PC.0.next)))
(let ((.def_42 (and .def_39 .def_41)))
(let ((.def_29 (bvslt i__2$main.next (_ bv200 32))))
(let ((.def_30 (not .def_29)))
(let ((.def_27 (and .def_25 .def_26)))
(let ((.def_31 (and .def_27 .def_30)))
(let ((.def_35 (and .def_31 .def_34)))
(let ((.def_43 (and .def_35 .def_42)))
(let ((.def_44 (and .def_16 .def_43)))
(let ((.def_58 (or .def_44 .def_57)))
(let ((.def_67 (or .def_58 .def_66)))
(let ((.def_75 (or .def_67 .def_74)))
(let ((.def_78 (or .def_75 .def_77)))
.def_78)))))))))))))))))))))))))))))))))))))))))))))))))))))))) (state |.PC.0.next| |.PC.1.next| |.PC.2.next| |__RET__$main.next| |j__4$main.next| |i__2$main.next|))))
(assert (forall ((|i__2$main.next| (_ BitVec 32)) (|__RET__$main.next| (_ BitVec 32)) (|__RET__$main| (_ BitVec 32)) (|j__4$main| (_ BitVec 32)) (|j__4$main.next| (_ BitVec 32)) (|.PC.2| Bool) (|.PC.1| Bool) (|.PC.0| Bool) (|.PC.0.next| Bool) (|.PC.1.next| Bool) (|.PC.2.next| Bool) (|i__2$main| (_ BitVec 32))) (=> (state |.PC.0| |.PC.1| |.PC.2| |__RET__$main| |j__4$main| |i__2$main|) (let ((.def_12 (not .PC.1)))
(let ((.def_10 (not .PC.0)))
(let ((.def_13 (and .def_10 .def_12)))
(let ((.def_76 (and .def_13 .PC.2)))
(let ((.def_79 (not .def_76)))
.def_79))))))))
(check-sat)
