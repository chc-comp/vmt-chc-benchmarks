;; translated from ./bv/up-nested.c.vmt
;; original benchmark available at: https://es-static.fbk.eu/people/griggio/ic3ia/index.html
;; author: Alberto Griggio <griggio@fbk.eu>
(set-logic HORN)
(declare-fun state (Bool Bool Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((|__RET__$main| (_ BitVec 32)) (|n__1$main.next| (_ BitVec 32)) (|.PC.0.next| Bool) (|.PC.1.next| Bool) (|.PC.2.next| Bool) (|__NONDET_INLINE_INIT__4__5$main#1| (_ BitVec 32)) (|__NONDET_INLINE_INIT__2__4$main#0| (_ BitVec 32)) (|.PC.2| Bool) (|.PC.1| Bool) (|.PC.0| Bool) (|j__3$main| (_ BitVec 32)) (|n__1$main| (_ BitVec 32)) (|j__3$main.next| (_ BitVec 32)) (|__RET__$main.next| (_ BitVec 32))) (=> (let ((.def_15 (not .PC.2)))
(let ((.def_12 (not .PC.1)))
(let ((.def_10 (not .PC.0)))
(let ((.def_13 (and .def_10 .def_12)))
(let ((.def_16 (and .def_13 .def_15)))
.def_16))))) (state |.PC.0| |.PC.1| |.PC.2| |__RET__$main| |n__1$main| |j__3$main|))))
(assert (forall ((|__RET__$main| (_ BitVec 32)) (|n__1$main.next| (_ BitVec 32)) (|.PC.0.next| Bool) (|.PC.1.next| Bool) (|.PC.2.next| Bool) (|__NONDET_INLINE_INIT__4__5$main#1| (_ BitVec 32)) (|__NONDET_INLINE_INIT__2__4$main#0| (_ BitVec 32)) (|.PC.2| Bool) (|.PC.1| Bool) (|.PC.0| Bool) (|j__3$main| (_ BitVec 32)) (|n__1$main| (_ BitVec 32)) (|j__3$main.next| (_ BitVec 32)) (|__RET__$main.next| (_ BitVec 32))) (=> (and (state |.PC.0| |.PC.1| |.PC.2| |__RET__$main| |n__1$main| |j__3$main|) (let ((.def_48 (bvslt n__1$main j__3$main)))
(let ((.def_49 (not .def_48)))
(let ((.def_46 (bvadd (_ bv1 32) j__3$main)))
(let ((.def_47 (= j__3$main.next .def_46)))
(let ((.def_50 (and .def_47 .def_49)))
(let ((.def_29 (= __RET__$main __RET__$main.next)))
(let ((.def_51 (and .def_29 .def_50)))
(let ((.def_43 (= n__1$main.next n__1$main)))
(let ((.def_52 (and .def_43 .def_51)))
(let ((.def_34 (not .PC.1.next)))
(let ((.def_36 (and .def_34 .PC.0.next)))
(let ((.def_32 (not .PC.2.next)))
(let ((.def_37 (and .def_32 .def_36)))
(let ((.def_53 (and .def_37 .def_52)))
(let ((.def_12 (not .PC.1)))
(let ((.def_40 (and .PC.0 .def_12)))
(let ((.def_15 (not .PC.2)))
(let ((.def_41 (and .def_15 .def_40)))
(let ((.def_54 (and .def_41 .def_53)))
(let ((.def_24 (bvslt n__1$main.next j__3$main.next)))
(let ((.def_25 (not .def_24)))
(let ((.def_22 (= j__3$main.next |__NONDET_INLINE_INIT__4__5$main#1|)))
(let ((.def_19 (= n__1$main.next |__NONDET_INLINE_INIT__2__4$main#0|)))
(let ((.def_23 (and .def_19 .def_22)))
(let ((.def_26 (and .def_23 .def_25)))
(let ((.def_30 (and .def_26 .def_29)))
(let ((.def_38 (and .def_30 .def_37)))
(let ((.def_10 (not .PC.0)))
(let ((.def_13 (and .def_10 .def_12)))
(let ((.def_16 (and .def_13 .def_15)))
(let ((.def_39 (and .def_16 .def_38)))
(let ((.def_55 (or .def_39 .def_54)))
.def_55))))))))))))))))))))))))))))))))) (state |.PC.0.next| |.PC.1.next| |.PC.2.next| |__RET__$main.next| |n__1$main.next| |j__3$main.next|))))
(assert (forall ((|__RET__$main| (_ BitVec 32)) (|n__1$main.next| (_ BitVec 32)) (|.PC.0.next| Bool) (|.PC.1.next| Bool) (|.PC.2.next| Bool) (|__NONDET_INLINE_INIT__4__5$main#1| (_ BitVec 32)) (|__NONDET_INLINE_INIT__2__4$main#0| (_ BitVec 32)) (|.PC.2| Bool) (|.PC.1| Bool) (|.PC.0| Bool) (|j__3$main| (_ BitVec 32)) (|n__1$main| (_ BitVec 32)) (|j__3$main.next| (_ BitVec 32)) (|__RET__$main.next| (_ BitVec 32))) (=> (state |.PC.0| |.PC.1| |.PC.2| |__RET__$main| |n__1$main| |j__3$main|) (let ((.def_56 (and .PC.0 .PC.1)))
(let ((.def_15 (not .PC.2)))
(let ((.def_57 (and .def_15 .def_56)))
(let ((.def_58 (not .def_57)))
.def_58)))))))
(check-sat)
